console.log('--------------------  Example - 01 --------------------');
{
    //* –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
    /** createProduct(obj, callback) - –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É –±–µ–∑ ID, –∞ —Ç–∞–∫–æ–∂ –∫–æ–ª–±–µ–∫.
     * –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —Ç–æ–≤–∞—Ä—É, –¥–æ–¥–∞—é—á–∏ –π–æ–º—É —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —É
     * –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å ID —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—î –∫–æ–ª–±–µ–∫, –ø–µ—Ä–µ–¥–∞—é—á–∏ –π–æ–º—É —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –æ–±'—î–∫—Ç.
     *
     * logProduct(product) - –∫–æ–ª–±–µ–∫, –ø—Ä–∏–π–º–∞—é—á–∏–π –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—é—á–∏–π –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
     *
     * logTotalPrice(product) - –∫–æ–ª–±–µ–∫, —â–æ –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –ø—Ä–æ–¥—É–∫—Ç—É —ñ –ª–æ–≥—É—î
     * –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É –≤ –∫–æ–Ω—Å–æ–ª—å.
     */

    function createProduct(obj, callback) {
        const product = {
            id: Date.now(),
            ...obj,
        };
        callback(product);
        console.log(product);
    }

    function logProduct(obj) {
        console.log(`Product ${obj.name}`);
    }

    function logTotalPrice({ price, quantity }) {
        console.log(`Total price ${price * quantity}`);
    }

    createProduct(
        {
            name: 'üçé',
            price: 30,
            quantity: 3,
        },
        logProduct,
    );

    createProduct(
        {
            name: 'üçã',
            price: 20,
            quantity: 5,
        },
        logTotalPrice,
    );
}

console.log('--------------------  Example - 02 --------------------');

{
    //* –ö–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
    /**–î–æ–¥–∞–π—Ç–µ –≤ –æ–±'—î–∫—Ç account –º–µ—Ç–æ–¥–∏ withdraw (amount, onSuccess, onError) —Ç–∞
     * deposit(amount, onSuccess, onError), –¥–µ –ø–µ—Ä—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Ü–µ —Å—É–º–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó,
     * –∞ –¥—Ä—É–≥–∏–π —Ç–∞ —Ç—Ä–µ—Ç—ñ–π - –∫–æ–ª–±–µ–∫–∏.
     *
     * –ú–µ—Ç–æ–¥ withdraw –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT
     * –∞–±–æ this.balance, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É
     *
     * –ú–µ—Ç–æ–¥ deposit –≤–∏–∫–ª–∏–∫–∞—î onError —è–∫—â–æ amount –±—ñ–ª—å—à–µ TRANSACTION_LIMIT –∞–±–æ –º–µ–Ω—à–µ
     * –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é, —ñ onSuccess –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É
     * */

    const TRANSACTION_LIMIT = 1000;

    const account = {
        username: 'Jacob',
        balance: 400,

        withdraw(amount, onSuccess, onError) {
            if (amount > TRANSACTION_LIMIT) {
                onError(`TRANSACTION_LIMIT ${TRANSACTION_LIMIT}`);
                return;
            } else if (this.balance < amount) {
                onError(`Not enough in the account`);
                return;
            }
            this.balance -= amount;
            onSuccess(
                `Transaction complete. Successfully ${amount}. Balance ${this.balance}`,
            );
        },

        deposit(amount, onSuccess, onError) {
            if (amount > TRANSACTION_LIMIT) {
                onError(`TRANSACTION_LIMIT ${TRANSACTION_LIMIT}`);
                return;
            } else if (amount <= 0) {
                onError(`Nice try BroüòÇ`);
                return;
            }
            this.balance += amount;
            onSuccess(`Added ${amount}. Balanse ${this.balance}`);
        },
    };

    function handleSuccess(message) {
        console.log(`‚úÖ Success! ${message}`);
    }

    function handleError(message) {
        console.log(`‚ùå Error! ${message}`);
    }

    account.withdraw(2000, handleSuccess, handleError);
    account.withdraw(600, handleSuccess, handleError);
    account.withdraw(300, handleSuccess, handleError);

    account.deposit(1700, handleSuccess, handleError);
    account.deposit(0, handleSuccess, handleError);
    account.deposit(-600, handleSuccess, handleError);
    account.deposit(600, handleSuccess, handleError);
}

console.log('--------------------  Example - 03 --------------------');

{
    /** –ö–æ–ª–±–µ–∫ —Ñ—É–Ω–∫—Ü—ñ—ó
     *
     * –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é each(array, callback), —è–∫–∞ –ø–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –æ—á—ñ–∫—É—î –º–∞—Å–∏–≤,
     * –∞ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É. –§—É–Ω–∫—Ü—ñ—è each
     * –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤, –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ —è–∫–æ–≥–æ –±—É–¥—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤–∏–∫–ª–∏–∫—É –∫–æ–ª–±–µ–∫–∞.
     * */

    function each(array, callback) {
        let newArr = [];
        for (const el of array) {
            newArr.push(callback(el));
        }
        return newArr;
    }

    console.log(
        each([64, 49, 36, 25, 16], function (value) {
            return value * 2;
        }),
    );

    console.log(
        each([64, 49, 36, 25, 16], function (value) {
            return value - 10;
        }),
    );

    console.log(
        each([64, 49, 36, 25, 16], function (value) {
            return Math.sqrt(value);
        }),
    );

    console.log(
        each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
            return Math.ceil(value);
        }),
    );

    console.log(
        each([1.5, 2.1, 16.4, 9.7, 11.3], function (value) {
            return Math.floor(value);
        }),
    );
}

console.log('--------------------  Example - 04 --------------------');

{
    /** –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
     *
     * –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π*/

    // const createProduct = (partialProduct, callback) {
    //     const product = {
    //         id: Date.now(),
    //         ...partialProduct,
    //     };
    //     callback(product);
    // }

    const createProduct = (partialProduct, callback) =>
        callback({
            id: Date.now(),
            ...partialProduct,
        });

    const logProduct = product => console.log(product.name);

    const logTotalPrice = ({ price, quantity }) =>
        console.log(price * quantity);

    createProduct(
        {
            name: 'üçé',
            price: 30,
            quantity: 3,
        },
        logProduct,
    );

    createProduct(
        {
            name: 'üçã',
            price: 20,
            quantity: 2,
        },
        logTotalPrice,
    );
}

console.log('--------------------  Example - 05 --------------------');

{
    /** –°—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
     *
     * –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–ª–±–µ–∫—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π
     */

    const TRANSACTION_LIMIT = 1000;

    const account = {
        username: 'Jacob',
        balance: 400,

        withdraw(amount, onSuccess, onError) {
            if (amount > TRANSACTION_LIMIT) {
                onError(`TRANSACTION_LIMIT ${TRANSACTION_LIMIT}`);
                return;
            } else if (this.balance < amount) {
                onError(`Not enough in the account`);
                return;
            }
            this.balance -= amount;
            onSuccess(
                `Transaction complete. Successfully ${amount}. Balance ${this.balance}`,
            );
        },

        deposit(amount, onSuccess, onError) {
            if (amount > TRANSACTION_LIMIT) {
                onError(`TRANSACTION_LIMIT ${TRANSACTION_LIMIT}`);
                return;
            } else if (amount <= 0) {
                onError(`Nice try BroüòÇ`);
                return;
            }
            this.balance += amount;
            onSuccess(`Added ${amount}. Balanse ${this.balance}`);
        },
    };

    const handleSuccess = message => console.log(`‚úÖ Success! ${message}`);
    const handleError = message => console.log(`‚ùå Error! ${message}`);

    account.withdraw(2000, handleSuccess, handleError);
    account.withdraw(600, handleSuccess, handleError);
    account.withdraw(300, handleSuccess, handleError);

    account.deposit(1700, handleSuccess, handleError);
    account.deposit(0, handleSuccess, handleError);
    account.deposit(-600, handleSuccess, handleError);
    account.deposit(600, handleSuccess, handleError);
}

console.log('--------------------  Example - 06 --------------------');

{
    /** I–Ω–ª–∞–π–Ω —Å—Ç—Ä—ñ–ª–æ—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
     *
     * –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Å—Ç—Ä—ñ–ª–æ—á–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π.
     */

    const each = (array, callback) => {
        let newArr = [];
        for (const el of array) {
            newArr.push(callback(el));
        }
        return newArr;
    };

    console.log(each([64, 49, 36, 25, 16], value => value * 2));

    console.log(each([64, 49, 36, 25, 16], value => value - 10));

    console.log(each([64, 49, 36, 25, 16], value => Math.sqrt(value)));

    console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.ceil(value)));

    console.log(each([1.5, 2.1, 16.4, 9.7, 11.3], value => Math.floor(value)));
}

console.log('--------------------  Example - 07 --------------------');
{
    /** –ú–µ—Ç–æ–¥ forEach
     *
     * –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
     */
    // function logItems(items) {
    //     console.log(items);
    //     for (let i = 0; i < items.length; i += 1) {
    //         console.log(`${i + 1} - ${i}`);
    //     }
    // }

    const logItems = arr =>
        arr.forEach((item, idx) => console.log(`${idx + 1} - ${item}`));

    logItems(['Mango', 'Poly', 'Ajax']);
    logItems(['üçé', 'üçá', 'üçë', 'üçå', 'üçã']);
}

console.log('--------------------  Example - 08 --------------------');
{
    /**  –ú–µ—Ç–æ–¥ forEach
     *
     * –í–∏–∫–æ–Ω–∞–π—Ç–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ—Ç–æ–¥—É forEach —Ç–∞ —Å—Ç—Ä—ñ–ª–æ—á–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
     */

    // function calculateAverage(...args) {
    //     let total = 0;

    //     for (let i = 0; i < args.length; i += 1) {
    //         total += args[i];
    //     }
    //     return total / args.length;
    // }

    const calculateAverage = (...arr) => {
        // console.log(arr);
        let total = 0;
        arr.forEach(value => (total += value));
        // console.log(total);
        return total / arr.length;
    };

    console.log(calculateAverage(1, 2, 3, 4));
    console.log(calculateAverage(14, 8, 2));
    console.log(calculateAverage(27, 43, 2, 8, 36));
}
