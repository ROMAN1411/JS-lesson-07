/*
 * –§—É–Ω–∫—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é.
 *
 * –í–æ–∑–≤—Ä–∞—â–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø
 * –∫–æ –≤—Å–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º (–æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏)
 * —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Ç–æ–π –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –µ—ë –≤–µ—Ä–Ω—É–ª–∏),
 * —ç—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è ¬´–∑–∞–º—ã–∫–∞–Ω–∏–µ¬ª.
 */

const fnA = function (parameter) {
    const innerVariable = '–∑–Ω–∞—á–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ fnA';

    const innerFunction = function () {
        console.log(parameter);
        console.log(innerVariable);
        console.log('–≠—Ç–æ –≤—ã–∑–æ–≤ innerFunction');
    };

    return innerFunction;
};

// const fnB = fnA(555);

// fnB();

// console.log(fnB);

/*
 * –ü–æ–≤–∞—Ä—ë–Ω–æ–∫
 */
// const makeDish = function (sheffName, dish) {
//     console.log(`${sheffName} –≥–æ—Ç–æ–≤–∏—Ç ${dish}`);
// };

// makeDish('Mango', '–ø–∏—Ä–æ–∂–æ–∫');
// makeDish('Mango', '–æ–º–ª–µ—Ç');
// makeDish('Mango', '—á–∞–π');

// makeDish('Poly', '–∫–æ—Ç–ª–µ—Ç—ã');
// makeDish('Poly', '—Å—É–ø–∏–∫');
// makeDish('Poly', '–∫–æ—Ñ–µ');

const makeSheff = function (name) {
    const innverVar = 555;
    const message = 'hello';

    const makeDish = function (dish) {
        console.log(message);
        console.log(innverVar);
        console.log(`${name} –≥–æ—Ç–æ–≤–∏—Ç ${dish}`);
    };

    return makeDish;
};

// const mango = makeSheff('Mango');

// console.dir(mango);

// mango('–∫–æ—Ç–ª–µ—Ç—ã');
// mango('–ø–∏—Ä–æ–∂–æ–∫');

// const poly = makeSheff('Poly');

// console.dir(poly);

// poly('—á–∞–π');
// poly('–æ–º–ª–µ—Ç');

// console.dir(mango);

/*
 * –û–∫—Ä—É–≥–ª—è—Ç–æ—Ä ü§∑‚Äç‚ôÇÔ∏è
 */

// const floatingPoint = 3.456789;
// const someInt = Math.round(floatingPoint); // 3
// const withDecimals = Number(floatingPoint.toFixed(2)); // 3.46

// const rounder = function (number, places) {
//     return Number(number.toFixed(places));
// };

// console.log(rounder(3.4567, 2));
// console.log(rounder(3.4567, 3));
// console.log(rounder(5.1234, 2));
// console.log(rounder(3.4567, 3));

const rounder = function (places) {
    return function (number) {
        return Number(number.toFixed(places));
    };
};

// const rounder2 = rounder(2);
// const rounder3 = rounder(3);

// console.dir(rounder2);
// console.dir(rounder3);

// console.log(rounder2(3.4567));
// console.log(rounder2(5.4512312312367));
// console.log(rounder3(3.4567));
// console.log(rounder2(5.1234));
// console.log(rounder3(3.4567));
// console.log(rounder3(10.67667));

/*
 * –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ - —Å–∫—Ä—ã—Ç–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */

const salaryManagerFactory = function (employeeName, baseSalary = 0) {
    let salary = baseSalary;

    return {
        raise(amount) {
            if (amount > 1000) {
                return '–¢—ã –æ—Ñ–∏–≥–µ–ª?';
            }

            salary += amount;
        },
        lower(amount) {
            salary -= amount;
        },
        current() {
            return `–¢–µ–∫—É—â–∞—è –∑–∞—Ä–ø–∞–ª–∞—Ç–∞ ${employeeName} - ${salary}`;
        },
    };
};

const salaryManager = salaryManagerFactory('Mango', 5000);

console.log(salaryManager.current());

console.log(salaryManager.raise(10000000));

console.log(salaryManager.current());

// const myLibFactory = function () {
//     let value = 0;

//     const add = function (num) {
//         value += num;
//     };

//     return {
//         add: add,
//         getValue() {
//             return value;
//         },
//     };
// };

// const myLib = myLibFactory();

// console.dir(myLib.getValue);

// console.log(myLib);
// console.log(myLib.getValue());
// myLib.add(10);
// console.log(myLib.getValue());